1.消息认证的局限性与数字签名的必要性
  1）消息认证能够使通信双方对接收到的信息的来源及完整性进行验证，用于保护通信双方以防止第三方的攻击，然而却不能
     防止通信双方中的一方对另一方的欺骗或伪造。
  2）通信双方之间也可能有多种形式的欺骗，例如发送方Alice和接收方Bob利用双方共享的密钥采用对称加密体制进行消息认
     证的通信时，则可能发生以下欺骗：
	 ① Bob可以伪造一个消息并声称是由Alice发出的，由于两者共享密钥，所以可以通过消息认证；
	 ② 由于Bob有可能伪造Alice发来的消息，所以Alice就可以对自己发过的消息予以否认；
2.数字签名的步骤
  1）具有消息摘要的数字签名的步骤
     ① 将消息按散列算法计算得到一个固定位数的消息摘要值；
	 ② 对消息摘要值用发送者的私钥密钥加密，所产生的密文即称数字签名。然后将该数字签名同原消息一起发送给接收者；
	 ③ 接收方收到消息和数字签名后，用同样的散列算法对消息计算摘要值，然后用发送者的公开密钥对数字签名进行解密，
	    将解密后的结果与计算的摘要值相比较，如相等则说明报文确实来自发送者；
  2）具有保密性数字签名的步骤
     ① 同上
	 ② 发送方使用自己的私钥对消息摘要进行数字签名。
	 ③ 发送方把这个数字签名作为要发送信息的附件和明文消息一同用接收方的公钥进行加密，将加密后的密文发送给收方；
	 ④ 收方首先把接收到的密文使用自己的私钥解密，得到明文信息和数字签名，再用发方的公钥对数字签名进行解密，随
	    后使用相同的单向散列函数来计算解密得到的明文信息，得到信息摘要，比较此信息摘要与解密数字签名得到的值是
		否相同；
3.数字签名的执行方式
  1）直接方式的数字签名方案（Direct Digital Signature）
  2）基于仲裁方式的数字签名方案（Arbitrated Digital Signature）
4.直接方式的数字签名方案 
  1）主要有以下四种形式
	 ① 发送方Alice使用自己的私钥对消息直接进行签名，接收方Bob使用发送方的公钥对签名进行鉴别；
	 ② 发送方Alice可以先使用其私钥对明文消息进行加密以提供数字签名，然后再使用接收方Bob的公钥进行加密来提供保
	    密性。接收方Bob先使用自己的私钥解密，再使用发送方Alice的公钥进行解密；
	 ③ 发送方Alice先生成消息摘要，然后对消息摘要进行数字签名，之后将明文与数字签名发送给接收方Bob；
	 ④ 发送方Alice先生成消息摘要，然后对消息摘要进行数字签名，然后再使用接收方Bob的公钥把数字签名和消息一起作
	    为一个整体进行加密，之后发送给Bob；
  2）对于 ② ④，如果通信双方已经共享密钥 K 的话，可以使用对称加密算法进行代替，以提高效率。
  3）直接方式的数字签名方案的有效性取决于发送方私钥的安全性，正因如此，它无法有效解决发送方否认签名的行为；
5.基于仲裁方式的数字签名方案
  1）假定Alice和Bob进行通信，所有从发方Alice到收方Bob的签名消息首先送到仲裁者TA，TA对消息及其签名进行一系列测试
     以验证消息来源及其内容，TA对消息及其签名验证完成后，然后TA给消息加上日期（时间戳），再连同一个表示该消息已
	 通过仲裁者验证的指令一起发给收文Bob。此时由于TA的存在，发方Alice无法对自己发出的消息予以否认。
  2）引入可信的仲裁者(TA)可以有效解决直接方式数字签名方案中所面临的发送方的否认行为带来的难题，并使得对于消息的
     验证具有了实时性；
  3）此种数字签名方案既可以通过对称密码体制实现，也可以通过公钥密码体制实现；
6.基于对称密码体制的仲裁方式数字签名方案
  假设发送方X与仲裁者A之间共享一个密钥 Kax, 接收方与仲裁者A之间共享一个密钥 Kay。
  根据消息 M 是以明文方式传送还是以密文方式传送，又可以分为以下两种：
  1）方案一：使用对称加密体制，明文传送消息 M, 仲裁者可以看到消息内容，过程如下：
     ① 用户X准备好消息 M, 并计算消息的散列值，产生摘要 H(M);
	 ② 用户X用自己的身份标识符 IDx 和 H(M), 生成签名 IDx||H(M);
	 ③ 用户X用自己与仲裁者A的共享密钥 Kax 加密上面生成的签名 IDx||H(M)，得到 EKax[IDx||H(M)];
	 ④ 用户X将消息 M 以及上面加密的签名 EKax[IDx||H(M)] 一起发送给仲裁者A;
			X -> A: M||EKax[IDx||H(M)]
	 ⑤ 仲裁者A用自己与X的共享密钥Kax解密收到的签名，并用散列值 H(M) 验证消息 M 的有效性；
	 ⑥ 若通过验证，仲裁者A将从X收到的内容、用户X的身份标识符 IDx 以及时间戳 T 一起用仲裁者A与用户Y的共享密钥 Kay
	    加密后发给Y;
			A -> Y: EKay[IDx||M||EKax[IDx||H(M)]||T]
		其中时间戳 T 用于向Y表示所发的是即时的新鲜消息而不是重放的旧消息。
	 ⑦ 用户Y收到后，解密仲裁者A发送来的消息，并将消息 M 及其签名保存起来以备万一出现争议的时候使用。如果出现争议，
	    Y将 EKay[IDx||M||EKax[IDx||H(M)]||T] 发送给仲裁者A进行仲裁；
  2）方案二：使用对称密码体制，密文传送消息 M, 仲裁者不能看到消息内容，过程如下：
     ① 用户X准备好消息 M 后用自己与Y的共享密钥 Kxy 加密消息 M, 得到消息 M 加密后的密文 EKxy[M];
	 ② 用户X计算密文消息 EKxy[M] 的散列值，产生密文消息的摘要 H(EKxy[M]);
	 ③ 用户X用自己的身份标识符 IDx 和 H(EKxy[M]), 生成签名 IDx||H(EKxy[M]);
	 ④ 用户X用自己与仲裁者A的共享密钥 Kax 加密上面生成的签名 IDx||H(EKxy[M]), 得到加密的签名 EKax[IDx||H(EKxy[M])];
	 ⑤ 用户X将自己的身份标识符 IDx、密文消息 EKxy[M] 以及上面加密的签名 EKax[IDx||H(EKxy[M])] 一起发送给仲裁者A;
			X -> A: IDx||EKxy[M]||EKax[IDx||H(EKxy[M])]
	 ⑥ 仲裁者A用自己与X的共享密钥 Kax 解密收到的签名，并用散列值 H(EKxy[M]) 验证密文消息 EKxy(M) 的有效性;
	 ⑦ 若通过验证，仲裁者A将从X收到的内容，加上一个时间戳 T, 然后再用仲裁者A与用户Y的共享密钥 Kay 加密后发送Y;
			A -> Y: EKay[IDx||EKxy(M)||EKax[IDx||H(EKxy[M])]||T]
	 ⑧ 用户Y收到解密仲裁者A发送来的消息，并将密文消息 EKxy(M) 及其签名保存起来以备万一出现争议的时候使用。
  3）利用对称密码体制实现仲裁方式的签名方案存在的问题：
     ① 仲裁者与发送方共谋可以否认一个已经签名的消息；
	 ② 仲裁者与接收方共谋可以伪造发送方的签名；
7.基于公钥密码体制的仲裁方式数字签名方案
  1）此种方式又可分为外部保密方式和内部保密方式，外部保密方式是指数字签名是直接对需要签名的消息生成而不是对已加密的消息
     生成，否则称为内部保密方式；
  2）如果采用外部保密方式，接收方就可将明文消息及数字签名存储下来以备出现争议时使用，因为第三方在处理争议时，需得到明文
     消息及其签名。但如果采用内部保密方式，第三方必须得到消息的解密密钥后才能得到明文消息；
  3）以内部保密方式为例，进行过程说明，SKa 和 SKx 分别是A和X的私钥，PKy 是Y的公钥；
     ① 用户X对消息 M 进行双重加密，首先用X的私钥 SKx 对消息 M 加密，然后用Y的公钥 PKy 再次对消息 M 加密;
	 ② 用户X将该信息以及X的标识符 IDx 一起用 SKx 签名后与 IDx 一起发送给A
			X -> A: IDx||ESKx[IDx||EPKy[ESKx[M]]]
	 ③ A收到X发来的内容后，用X的公开密钥对 ESKx[IDx||EPKy[ESKx[M]]] 进行解密，并将解密后得到的 IDx 与收到的 IDx 加以比
	    较，从而确信这一消息来自于X;
	 ④ 验证通过后，A将X的身份 IDx 和X对 M 的签名加上时间戳 T 后，再用自己的私钥 SKa 加密后发送给Y:
			A -> Y: ESKa[IDx||EPKy[ESKx[M]]||T]
	 ⑤ 用户Y用A的公钥解密，然后继续用Y自己的私钥和X的公钥进行解密，得到明文 M
  4）基于公钥密码体制的仲裁方式数字签名方案的优点
     ① 在协议执行前，各方都不必有共享的信息，从而防止共谋；
	 ② 只要仲裁者私钥不被泄露，任何人（包括发方）就不能发送重放的消息；
  5）一般情况下，实现使用的数字签名方案通常是基于公钥密码体制的数字签名方案，且是对消息的摘要进行签名，而不是对消息本身。
8.常见的公钥密码体制数字签名方案
  1）采用公钥密码体制实现的数字签名方案在收文双方之间不需要引入第三方可信赖机构；
  2）数字签名方案种类
     ① RSA数字签名方案；
	 ② ElGamal数字签名方案；
	 ③ 椭圆曲线数字签名方案（ECDSA）；
	 ④ 改进的椭圆曲线数字签名算法;
9.特殊的数字签名方案
  1）盲签名方案
  2）代理签名方案
  3）门限群签名