1.单钥密码体制的缺陷
  1）密钥的分配和管理问题
  2）数字签名和认证问题
2.公钥密码体制有三种基本模型
  1）加密模型；
  2）认证模型；
  3）认证加密模型；
3.认证加密模型
  1）发送方Alice首先用自己的私钥SKa对明文消息m加密，用于提供数字签名。再利用接收方Bob的公钥PKb进行二次加密，即
		c = Epkb[Eska[m]]
  2）解密过程为 m = Dpka[Dskb[c]]，即接收方Bob先用自己的私钥SKb，再用发送方的公钥PKa对收到的密文两次解密
  3）认证加密模型可以同时提供认证功能和保密性，但是该方案的缺点是在每次通信中要执行四次复杂的公钥算法；
4.公钥密码体制基于三类数学难题
  1）大整数分解问题，如RSA公钥密码体制；
  2）离散对数问题，如ElGamal公钥密码体制；
  3）椭圆曲线离散对数问题，如ECC公钥密码体制；
  有时也把椭圆曲线离散对数问题归为离散对数问题。
5.RSA密码体制
  1）RSA算法是一种分组密码体制算法；
  2）RSA算法是第一个既能用于数据加密也能用于数字签名的算法；
6.RSA算法描述
  1）密钥生成
     ① 选取两个保密的大素数 p 和 q（p 和 q 一般是 100 位以上的十进制数）；
	 ② 计算 n = p × q。n 称为RSA算法的模数；
	 ③ Φ(n) = (p - 1)(q - 1)，其中 Φ(n) 是 n 的欧拉函数值；
	 ④ 选取一个随机整数 e （即加密密钥），使之满足 1 < e < Φ(n)，且 gcd(Φ(n), e) = 1；
	 ⑤ 计算解密密钥 d，满足 d * e ≡ 1 mod Φ(n)，即 d 是 e 在模 Φ(n) 下的乘法逆元，因 e 与 Φ(n) 互素，由模运算可
	    知，它的乘法逆元一定存在；
	 ⑥ 以 PK = {e, n} 为公钥并公布，SK = {d, n} 为私钥并保留。此时，p、q 不再需要，可以销毁。
  2）加密
     加密时首先将明文比特串分组，使得每个分组对应的十进制数小于 n，即分组长度小于 log2n。然后对每个明文分组 mi 做
	 一次加密运算，所有分组的密文构成的序列即是原始消息的加密结果。即 mi 满足 0 ≤ mi ＜ n，设 ci 为分组信息 mi 加
	 密后的密文，则加密算法为
				ci = mi^e mod n
	 ci 为密文，且 0 ≤ ci < n 。
  3）解密
     解密时对每一个密文分组 ci (0 ≤ ci < n) 的解密算法为
				mi = ci^d mod n
	 下面证明RSA算法中解密过程的正确性。
	 证明：由加密过程知 c ≡ m^e mod n，所以
				c^d mod n ≡ m^(e · d) mod n ≡ m^(1 mod Φ(n)) mod n ≡ m^(k · Φ(n) + 1) mod n
	 下面分两种情况：
	 Ⅰ.m 与 n 互素，则由欧拉定理得
			m^Φ(n) ≡ 1 mod n,   m^(k · Φ(n)) ≡ 1 mod n,   m^(k · Φ(n) + 1) ≡ m mod n
	    即 c^d mod n ≡ m 
	 Ⅱ.m 与 n 不互素，即 gcd (m, n) ≠ 1，m 与 n 必有大于 1 的公约数
	    又因为 n = p · q，且 p、q 均为素数，所以不妨设 m = c · p
		又因为 m < n，所以 m 一定不能被 q 整除，所以 gcd(m, q) = 1
		由欧拉定理得
				m^(k · Φ(q)) ≡ 1 mod n, 
				m^((k ·Φ(q)) · Φ(p)) ≡ 1 mod n, 
				m^(k · Φ(n)) ≡ 1 mod n, 
				m^(k · Φ(n)) + 1 ≡ m mod n
		所以 c^d mod n ≡ m
7.RSA的安全性
  1）为了保证RSA算法的安全性，一般对 p 和 q 提出以下要求：
	 ① p、q 长度差异尽量小一些，即 |p - q| 必须很小；
	 ② p - 1 和 q - 1 都应该有大素数因子；
	 ③ gcd(p - 1, q - 1)应很小；
8.RSA缺点
  1）产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密；
  2）分组长度太大，为保证安全性，对 n 的长度有要求，使运算代价很高；
  3）RSA最快的情况也比DES慢100倍，无论是软件还硬件实现；
9.椭圆曲线产生的数学背景、定义和运算
  1）一般来讲，椭圆曲线即三次平滑代数平面曲线，可在适当坐标下，表达成 Weierstrass 方程式：
		y^2 + a · x · y + b · y = x^3 + c · x^2 + d · x + e
     其中，系数 a, b, c, d, e 可以定义在某个基域 F 上（这里的基域 F 可以是理数域、实数域、复数域，还可以是有限域 
	 GF(p)，椭圆曲线密码体制中用到的椭圆曲线都是定义在有限域上的）。
  2）同时定义中还包括一个称为无穷点或者零点的特殊元素，记为 O。
10.基于实数域上的椭圆曲线及相关运算
  1）加法运算定义：如果椭圆曲线上的三个点位于同一直线上，那么它们的和为 O。
  2）在实数域下，椭圆曲线上的所有点，再加上一个无穷远点 O，就构成一个阿贝尔加法群。
  3）椭圆曲线加法律
	 ① 与零点相加。对椭圆曲线上任一点P，有 P + O = P。
	 ② 与逆元相加。对椭圆曲线上任一点P = (x, y)，其加法逆元（点P的对称点）为 -P = (x, -y), 且
			(-P) + P = P + (-P) = P - P = O
		几何意义：过点P和对称点-P作直线L，直线L与y轴平行，与曲线相交于无穷远点。
	 ③ 两点相加。对于椭圆曲线 y^2 = x^3 + a · x +b 上任意两点 P(x1, y1)，Q(x2, y2), P + Q = (x3, y3)，则有
			x3 = λ^2 - x1 -x2
			y3 = λ · (x1 - x2) - y1
	    其中
			λ = (y2 - y1) / (x2 - x1)				(P ≠ Q)
			λ = (3 · x1^2 + a) / (2 · y1)			(p = Q)
	 ④ 倍点规则。在 P 点做椭圆曲线的一条切线，设切线与椭圆曲线交于点 S，定义 2 · P = P + P = -S。类似地可定义
			P + P + P = 2 · P + P = 3 · P
  4）以上定义的加法具有加法运算的一般性质，如交换律、结合律。
  5）基于实数域的椭圆曲线算法往往产生循环小数，精度不高且产生运算错误。在实际的加密运算中，利用基于有限域或二进制
     域来实现加密。
11.基于有限域上的椭圆曲线及相关运算
  1）基于有限域的椭圆曲线是指曲线方程定义式
			y^2 + a · x · y + b · y = x^3 + c · x^2 + d · x + e
	 中，所有系数都是某一有限域 GF(p) 中的元素（其中，p为一大素数）。其中最为常用的是由方程：
			y^2 ≡ x^3 + a · x + b (mod p)		(a, b ∈ GF(p), (4a^3 + 27b^2)(mod p) ≠ 0 )
	 所定义的曲线。
  2）设 Ep(a, b) 表示上式所定义的椭圆曲线上的点集 {(x, y)| 0≤x<p, 0≤y<p，且 x, y 均为整数} 并上无穷远点 O。
12.基于有限域上的椭圆曲线的相关运算
  已知椭圆曲线方程 y^2 = x^3 + x (mod p), 则：
  1）判断该方程是否满足域 GF(23)。
  2）判断点(9, 5)是否满足该方程。
  3）满足该方程上的所有点E23(1, 0)
  解：1）因为 p = 23, a = 1, b = 0 ,所以
		 4 · a^3 + 27 · b^2 mod 23 ≡ 4 × 1^3 + 27 × 0^2 mod 23 4 ≠ 0
		 因此该方程不满足域 GF(23)。
	  2）由 y^2 mod p = x^3 + x mod p 可得
			5^2 mod 23 = 9^3 + 9 mod 23
			25 mod 23 = 738 mod 23
					2 = 2
		 所以点 (9, 5) 满足方程。
	  3）首先判断对每个点 x (0≤x<p 且 x 为整数)计算 x^3 + a · x + b (mod p) 的值，并判断结果是否为 y 的二次剩余，即
	     是否满足   y^2 ≡ result (mod p)
		 计算表格如下：
			+-------------------+-------------------+-------------------+-------------------+
			|         x         |   x^3 + x mod 23  |  是否为二次剩余   |         y         |
			+-------------------+-------------------+-------------------+-------------------+
			|         0         |         0         |        是         |         0         |
			+-------------------+-------------------+-------------------+-------------------+
			|         1         |         2         |        是         |       5，18       |
			+-------------------+-------------------+-------------------+-------------------+
			|         2         |        10         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         3         |         7         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         4         |        22         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         5         |        15         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         6         |        15         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         7         |         5         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         8         |        14         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|         9         |         2         |        是         |       5，18       |
			+-------------------+-------------------+-------------------+-------------------+
			|        10         |        21         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|        11         |         8         |        是         |      10，13       |
			+-------------------+-------------------+-------------------+-------------------+
			|        12         |        15         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|        13         |         2         |        是         |       5，18       |
			+-------------------+-------------------+-------------------+-------------------+
			|        14         |        21         |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|        15         |        9          |        是         |       3，20       |
			+-------------------+-------------------+-------------------+-------------------+
			|        16         |       18          |        是         |       8，15       |
			+-------------------+-------------------+-------------------+-------------------+
			|        17         |        8          |        是         |      10，13       |
			+-------------------+-------------------+-------------------+-------------------+
			|        18         |        8          |        是         |      10，13       |
			+-------------------+-------------------+-------------------+-------------------+
			|        19         |        1          |        是         |       1，22       |
			+-------------------+-------------------+-------------------+-------------------+
			|        20         |       16          |        是         |       4，19       |
			+-------------------+-------------------+-------------------+-------------------+
			|        21         |       13          |        是         |       6，17       |
			+-------------------+-------------------+-------------------+-------------------+
			|        22         |       21          |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
			|        23         |        0          |        否         |                   |
			+-------------------+-------------------+-------------------+-------------------+
	     满足该方程上的所有点的点集，可以记为 E23(1, 0)。本例中满足该方程总共有 24 个点（含无穷远点）。
		 点集 E23(1, 0) 可由下表给出：
			+---------+---------+---------+---------+---------+---------+---------+---------+
			| (0, 0)  | (1, 5)  | (1, 18) | (9, 5)  | (9, 18) |(11, 10) |(11, 13) | (13, 5) |
			+---------+---------+---------+---------+---------+---------+---------+---------+
			|(13, 18) | (15, 3) |(15, 20) | (16, 8) |(16, 15) |(17, 10) |(17, 13) |(18, 10) |
			+---------+---------+---------+---------+---------+---------+---------+---------+
			|(18, 13) | (19, 1) |(19, 22) | (20, 4) |(20, 19) | (21, 6) |(21, 17) |无穷远点O|
			+---------+---------+---------+---------+---------+---------+---------+---------+
13.定义在有限域上的椭圆曲线Ep(a, b)上的加法定义如下：
  设 P, Q ∈ Ep(a, b)，则
  1）P + O = P
  2）如果 P = (x, y)，那么 (x, y) + (x, -y) = O，即 (x, -y) 是 P 的加法逆元，表示为 -P。
     由 Ep(a, b) 的产生方式知，-P 也是 Ep(a, b) 中的点，如前述，P = (9, 5) ∈ E23(1, 0), -P = (9, -5)，而 -5 mod 23 ≡ 18，
	 所以 -P = (9, 18)，也在 E23(1, 0) 中
  3）设 P = (x1, y1)，Q = (x2, y2), P ≠ Q，则通过代数方法可具体算出 P + Q = (x3, y3)，由以下规则确定
			x3 ≡ λ^2 - x1 - x2 (mod p)
			y3 ≡ λ · (x1 - x3) - y1 mod p
	 其中
			λ = (y2 - y1) / (x2 - x1)			(P ≠ Q)
			λ = (3 · x1^2 + a) / (2 · y1)		(p = Q)
  4）倍点运算仍定义为重复加法，如 3 · P = P + P + P, 4 · P = P + P + P + P。
14.椭圆曲线上的数学难题
  1）在椭圆曲线构成的阿贝尔群 Ep(a, b) 上考虑方程 Q = kG，其中 G、Q 为椭圆曲线 Ep(a, b) 上的点，k < p, 则给定 k 和 G，根据加
     法法则，计算 Q 很容易。但反过来，给定 Q 和 G, 求 k 就非常难。
     这就是椭圆曲线加密算法的数学依据，确保椭圆曲线可应用于公钥密码体制。
		-- 点 G 称为基点(Base Point)或生成元
		-- k (k < n) 为私有密钥
		-- Q 为公开密钥
  2）ElGamal密码体制和Diffie-Hellman密钥交换是基于有限域上离散对数问题的公钥体制。
15.ElGamal 密码体制
  1）密钥产生过程
     首先选择一素数 p 以及两个小于 p 的随机数 g 和 x，且 g 为模 p 的原根，计算 y ≡ g^x mod p。以 (y, g, p) 作为公开密钥，x 作
	 为秘密密钥。
	 注：设 m 是正整数，a 是整数，若 a 模 m 的阶等于 φ(m)，则称 a 为模 m 的一个原根。
  2）加密
     设欲加密明文消息M，随机选一与 p - 1 互素的整数 k, 计算 C1 ≡ g^k mod p, C2 ≡ M · y^k mod p, 密文为 C = (C1, C2)。
  3）解密
		M = (C2 / C1^x) mod p
	 这是因为
		(C2 / C1^x) mod p = (M · y^k) / g^(k · x) mod p = (M · y^k) / y^k mod p = M mod p
16.假设Alice采用ElGmal密码体制，并选择素数 p = 2579, 私钥 x = 567，且已知 GF(p) 的一个生成元 g = 2.
  1）计算Alice的公钥 y。
  2）若 Bob 想私密发送消息 m = 1234 给 Alice，且他选择的随机数 r = 359, 试给出 Bob 和 Alice 的加密和解密过程。
  解：1）Alice的公钥：
			y = g^x mod p = 2^567 mod 2579 = 633
	  2）Bob 和 Alice 的加密和解密过程。
	     Bob 加密：
			c1 = g^r mod p = 2^359 mod 2579 = 1514
			c2 = m · y^r mod p = 1234 × 633^359 mod 2579 = 1478
		 Alice 解密：
			m = c2 · (c1^x)^-1 mod p
			  = 1478 × (1514^567)^-1 mod 2579
			  = 1478 × (1623)^-1 mod 2579
			  = 1478 × 116 mod 2579
			  = 171448 mod 2579
			  = 1234
	 暂时没发现计算 1478 × (1514^567)^-1 mod 2579 的好办法，只能硬算
			m = 1478 × (1514^567)^-1 mod 2579
			  = 1478 × (1514 · 2044^283)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535^141)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 1936^70)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 809^35)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 809 · 1994^17)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 809 · 1994 · 1797^8)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 809 · 1994 · 301^4)^-1 mod 2579
			  = 1478 × (1514 · 2044 · 2535 · 809 · 1994 · 336^2)^-1 mod 2579
			  = ...
16.利用椭圆曲线实现ElGmal密码体制
  1）首先选取一条椭圆曲线，并得 Ep(a, b), 将明文消息 m 通过编码嵌入到曲线上得点 Pm, 再对点 Pm 做加密变换。
  2）取 Ep(a, b) 的一个生成元 G, Ep(a, b) 和 G 作为公开参数。
  3）用户 A 选 nA 作为秘密密钥，并以 PA = nA · G 作为公开密钥。任一用户B若想向A发送消息 Pm, 可选取一随机正整数 k，产生以下点对作为密文：
			Cm = {kG, Pm + k · PA}
  4）A解密时，以密文点对中的第二个点减去用自己的秘密密钥与第一个点的倍乘，即
			Pm + k · PA - nA · k · G = Pm + k · (nA · G) - nA · k · G = Pm
  5）攻击者若想由 Cm 得到 Pm, 就必须知道 nA。而要得到 nA, 只有通过椭圆曲线上的两个已知点 G 和 nA · G, 这意味着必须求解椭圆曲线上的离散
     对数，因此不可行。
17.利用椭圆曲线实现ElGmal密码体制，取椭圆曲线E11(1, 6), 即椭圆曲线为 y ≡ x^3 + x + 6 的一个生成元 G = (2, 7)，接收方A的密钥 nA = 7, 计
  算接收方A的公开密钥为 PA = nA · G = 7 · G = (7, 2)。假定发送方B已将欲发往A的消息嵌入到椭圆曲线上的点 Pm = (10, 9)，B选取随机数 k = 3,
  那么发送方B可按如下步骤计算产生密文：
			C1 = k · G = 3 · G = (8, 3)
			C2 = Pm + k · PA = (10, 9) + 3 · (7, 2) = (10, 2)
  因此求得密文为
			Cm = {C1, C2} = {(8, 3), (10, 2)}
  接收方A从密文Cm恢复明文消息Pm的过程如下：
			Pm = C2 - nA · C1 = (Pm + k · PA) - nA · (k · G) = (10, 2) - 7 · (8, 3) = (10, 9)
  对Pm相应解码即可得到明文m。
18.Diffie-Hellman密钥交换方案
  1）Diffie-Hellman密钥交换方案是一种安全协议算法，该算法的唯一目的是使得素昧平生的通信双方能够在完全没有对方任何预先信息的条件下通过在
     不安全的公开信道中安全地交换密钥，得到一个共享的会话密钥，以便用于在后续的通信中作为对称密钥来加密通信内容。
  2）算法本身不能用于加密、解密。
  3）在Diffie-Hellman密钥交换方案中，通信双方不需要使用密钥分配中心 KDC，就可以创建一个对称会话密钥。
19.Diffie-Hellman密钥交换阶段
  1）第一阶段，产生全局公开量。双方协商确定一个大素数 p 和一个模 p 的生成元。
     在创建对称密钥之前，这两个机构要选择两个数 p 和 g，其中 p 是一个大素数， g ∈ Zp 是模 p 的本原根（生成元）， p 和 g 作为全程公开的
	 元素，不需要保密，它们可以通过互联网上的不安全信道发送，所有用户均可获取，并可为所有用户所共有。
  2）第二阶段，双方各自选取密钥 XA, XB，并计算各自的公开密钥 YA，YB 的值。
     ① 用户 A 的密钥（公钥和私钥）产生：选择一个保密的随机大整数 XA，1 ≤ XA ≤ p - 1，将 XA 作为秘密密钥，然后计算 YA = g^XA (mod p)
	 ② 用户 B 的密钥（公钥和私钥）产生：选择一个保密的随机大整数 XB, 1 ≤ XB ≤ p - 1, 将 XB 作为秘密密钥，然后计算 YB = g^XB (mod p)
  3）第三阶段，双方交换公开密钥 YA, YB 的值
     ① 用户A：将前面的计算结果 YA 的值发送给用户B。注意，用户A不发送保密随机数 XA 的值，只是发送 YA 的值；
	 ② 用户B：将前面的计算结果 YB 的值发送给用户A。注意，用户B不发送保密随机数 XB 的值，只是发送 YB 的值；
  4）第四阶段，求出会话密钥。双方交换公开密钥之后，每个人计算共享的会话密钥如下：
     ① 用户A产生秘密密钥：计算 KA = YB^XA (mod p)
	 ② 用户B产生秘密密钥：计算 KB = YA^XB (mod p)
	 KA = KB 的证明略
  其他：g 不需要很大，通常只是个一位数，并且在一般的实践中通常是 2 或者 5。
20.Diffie-Hellman密钥交换安全性分析
  1）由于用户A的秘密密钥 XA 和用户B的秘密密钥 XB 都是保密的，所以线路上的窃听者（攻击者）只能得到 p, g, YA, YB。攻击者要想得到 K，那么他
     必须要首先得到 XA 或者 XB 中的任何一个，而由 YA 求解 XA 或者由 YB 求解 XB, 这就意味着攻击者需要求解离散对数问题，因此，攻击者求 K 是
	 不可行的。
  2）Diffie-Hellman密钥交换方案必须结合实体认证，否则会受到中间人侵入攻击。
21.基于椭圆曲线的Diffie-Hellman密钥交换协议
  可以分成四个阶段来完成：
  1）第一阶段，产生全局公开量 Ep(a, b) 和 G。
     首先取一个大素数和两个参数 a、b, 构成椭圆曲线的阿贝尔群 Ep(a, b)。 然后，选取 Ep(a, b) 的一个生成元 G(x1, y1), 要求 G 的阶是一个非常
	 大的素数，G 的阶是满足 nG = O 的最小正整数 n。Ep(a, b) 和 G 作为公开参数。
  2）第二阶段，双方各自选取密钥 nA、nB，并计算各自的公开密钥 PA、PB 的值。
     ① 用户A的密钥（公钥和私钥）产生：选择一个保密的随机整数 nA, 1 ≤ nA ≤ n，将 nA 作为秘密密钥，然后计算 PA = nA · G 产生 Ep(a, b) 上的
	    一点作为用户A的公开密钥；
	 ② 用户B的密钥（公钥和私钥）产生：选择一个保密的随机整数 nB，1 ≤ nB ≤ n，将 nB 作为秘密密钥，然后计算 PB = nB · G 产生 Ep(a, b) 上的
	    一点作为用户B的公开密钥；
  3）第三阶段，双方交换公开密钥 PA、PB 的值。
     ① 用户A：将自己的公开钥 PA 的值发送给用户B。注意，用户A不发送保密随机数 nA 的值，只是发送公钥 PA 的值；
	 ② 用户B：将自己的公开钥 PB 的值发送给用户A。注意，用户B不发送保密随机数 nB 的值，只是发送公钥 PB 的值。
  4）第四阶段，求出会话密钥。双方交换公开密钥之后，每个人计算共享的会话密钥如下：
     ① 用户A产生秘密密钥：计算 KA = nA · PB;
	 ② 用户B产生秘密密钥：计算 KB = nB · PA;
	 证明 KA = KB
	 KA = nA · PB = nA · (nB · G) = nB · (nA · G) = nB · PA = KB = K
22.设 p = 211, Ep(0, -4), 即椭圆曲线为 y^2 = x^3 - 4， G = (2, 2) 是 E211(0, -4) 的阶为 241 的一个生成元，即 241 · G = O。用户A选择一个保
  密的随机数 nA = 121 作为秘密密钥，用户B选择一个保密的随机数 nB = 203 作为秘密密钥，然后按下列步骤求出会话密钥。
  解：1）双方分别计算各自的公开密钥 PA，PB 的值，并发送
         用户A的公钥：计算 PA = nA · G = 121 · (2, 2) = (115, 148)
		 用户B的公钥：计算 PB = nB · G = 203 · (2, 2) = (130, 203)
	  2）求出会话密钥
	     用户A产生秘密密钥：KA = nA · PB = 121 · (130, 203) = (161, 169)
		 用户B产生秘密密钥：KB = nB · PA = 203 · (115, 148) = (161, 169)