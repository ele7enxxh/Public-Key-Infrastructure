
验签的应用场景
  登陆验证
  事后验证
  传输附带验证

事后验证
  可以理解为，先对签名值进行保存，而不验签，有争议的时候再验签。
  如喝了假的茅台，拉肚子，茅台酒厂说，经过验证，这不是我厂出品的。

被签名的数据为字节数组。

#################### PKCS#1标准格式签名 ####################
介绍:
 1. PKCS#1 签名就是按照 PKCS#1 标准中的编码标准，先将原文摘要按照一定标准进行封装和补位再做签名运算，这种格式
    称为PKCS1Padding，如 SHA1withRSA 签名。
 2. NoPadding 的签名则没有补位，直接对摘要值做签名运算。
 3. 裸签名（RAWSign），不严格的讲，包含 PKCS1Padding 签名和 NoPadding 格式的签名。严格的讲，应该专指 NoPadding 
    的签名。
签名步骤:
 1. 用 SHA-1 摘要算法对需要签名的数据进行 HASH 运算，生成20字节 HASH 结果(摘要)；
 2. 按 PKCS#1 标准对 HASH 结果作填充；
 3. 使用私钥对填充后的数据块作 RSA 运算，生成签名结果。
验签步骤:
 1. 使用公钥对签名结果作 RSA 公钥解密运算并去掉填充，获得旧摘要:
 2. 对签名原数据作 HASH 运算，得到新摘要：
 3. 比较旧摘要与新摘要是否相等。如相等，则验证正确，否则验证错误。 
说明:
 1. 当使用1024位的RSA算法进行签名时，签名结果长度为128字节（与密钥长度相同）。
 
#################### PKCS#7标准格式签名 ####################
介绍:
 1. PKCS#7 签名是在 PKCS#1 签名的基础上增加了签名者信息等内容后，并进行 DER 编码后的数据结构。
 2. 验签三要素，原文 证书 签名值，缺一不可。预先发送证书最大的问题是如何仅仅通过 PKCS#1 签名值知道这个签名值是
    哪张证书签的。如果点对点系统，应用没问题，但多数应用系统并不是点对点的，都是客户端/服务器架构。PKCS#7 封装
	格式其中一个目的就是减少交互次数。
 3. PKCS#7 签名值基本涵盖了验签需要的所有东西和情况。本质上接收方对 PKCS#7 签名的验证，实质上是对其中所包含的签
    名证书的认证，只有证书合法，才能进行下面的验签。否则，即使验签通过，但证书无效，验签也不能通过。另一方面也可
    以看出，为了保证 PKCS#7 的有效性，其所包含的签名证书一定不能是自签名证书，否则容易引起中间人攻击。
 4. PKCS#7 数字签名格式表
	+------------------------------+------------------------------+
	| 版本号                       | 1                            |
	+------------------------------+------------------------------+
	| 信息摘要算法标识             |                              |
	+------------------------------+------------------------------+
	|                              | 数据类型                     |
	| 被签名内容信息               +------------------------------+
	|                              | 被签名内容(可选)             |
	+------------------------------+------------------------------+
	| 证书                         | 签名者证书和签发者证书(可选) |
	+------------------------------+------------------------------+
	| CRLs                         | 证书作废链(可选)             |
	+------------------------------+------------------------------+
	|                              | 版本号(1)                    |
	|                              +------------------------------+
	|                              | 证书序列号                   |
	|                              +------------------------------+
	|                              | 信息摘要算法标识             |
	| 签名者信息                   +------------------------------+
	|                              | 签名时间(可选)               |
	|                              +------------------------------+
	|                              | 签名算法标识                 |
	|                              +------------------------------+
	|                              | 签名值                       |
	+------------------------------+------------------------------+
  a. 在数字签名结果中可以包含 '被签名内容' (称为 Attach 方式)或不包含 '被签名内容' (称为 Detach 方式)；
     在数字签名结果中可以包含 '签名者证书' 也可以不包含 '签名者证书'。
  b. '签名值' 是通过私钥对 '被签名内容' 和其他可认证属性进行签名运算的结果。一般情况下，签名格式根据下面的需要
     进行选择:
     * 需要保存在数据库中的数字签名与被签名原数据采用分离的方式进行存放，即在 '被签名内容信息' 内不含实际的 
       '被签名内容'，'被签名内容' 存放在数据库其它地方。
     * 不包含 '签名者证书' ，可以减少签名数据大小，但在验证时需要查找证书。
     * 需要在网络上传输的数字签名，在签名包中可以包含 '被签名内容' 和 '签名者证书'。
签名步骤:
 1. 对原文使用 SHA-1 或 SM3 数据摘要算法作 HASH 运算，生成摘要；
 2. 按 PKCS#1 标准对摘要结果作填充；
 3. 使用用户的私钥对填充后的数据块作 RSA 运算；
 4. 按 PKCS#7 标准格式对签名进行编码，得到的结果即为 PKCS#7 数字签名；
验签步骤:
 1. 从 PKCS#7 签名中提取签名者证书序列号等信息，按证书序列号获取签名者证书并检验证书的有效性(在签名中提取证书
    或通过LDAP下载证书)；
 2. 从证书中提取签名者公钥，使用公钥对签名结果作 RSA 公钥解密运算并去掉填充，获得旧摘要；
 3. 对签名原数据作HASH运算，生成新摘要；
 4. 比较旧摘要与新摘要是否相等。如相等，则验证正确，否则验证错误。

#################### PKCS#7标准格式数字信封 ####################
介绍:
 1. 数字信封用于通信双方交换数据。发送方生成一个随机的报文密钥，使用报文密钥对发送内容进行加密(对称算法)，再用接收方的
    公钥对报文密钥加密，最后将加密的报文密钥和加密的发送内容按 PKCS#7 标准，编码组成一个“数字信封”。发送方还可以为发送
	内容附加签名。
 2. 数字信封格式(不带签名)
	+------------------------------+------------------------------+
	| 版本号                       | 0                            |
	+------------------------------+------------------------------+
	|                              | 版本号                       |
	|                              +------------------------------+
	|                              | 证书序列号                   |
	| 接收者信息                   +------------------------------+
	|                              | 对密钥的加密算法标识         |
	|                              +------------------------------+
	|                              | 加密的报文密钥               |
	+------------------------------+------------------------------+
	|                              | 数据类型                     |
	|                              +------------------------------+
	| 加密内容信息                 | 数据加密算法标识             |
	|                              +------------------------------+
	|                              | 加密的内容                   |
	+------------------------------+------------------------------+
 3. 数字信封格式(带签名)
	+------------------------------+------------------------------+
	| 版本号                       | 0                            |
	+------------------------------+------------------------------+
	|                              | 版本号                       |
	|                              +------------------------------+
	|                              | 证书序列号                   |
	| 接收者信息                   +------------------------------+
	|                              | 对密钥的加密算法标识         |
	|                              +------------------------------+
	|                              | 加密的报文密钥               |
	+------------------------------+------------------------------+
	| 信息摘要算法标识             | 算法标识                     |
	+------------------------------+------------------------------+
	|                              | 数据类型                     |
	|                              +------------------------------+
	| 加密内容信息                 | 数据加密算法标识             |
	|                              +------------------------------+
	|                              | 加密的内容(用报文密钥加密)   |
	+------------------------------+------------------------------+
	| 证书                         | 签名者证书和签发者证书(可选) |
	+------------------------------+------------------------------+
	|                              | 版本号(1)                    |
	|                              +------------------------------+
	|                              | 签名者证书序列号             |
	|                              +------------------------------+
	|                              | 签名时间                     |
	| 签名者信息                   +------------------------------+
	|                              | 签名算法                     |
	|                              +------------------------------+
	|                              | 加密的签名值(用报文密钥加密) |
	|                              +------------------------------+
	|                              | 其他属性                     |
	+------------------------------+------------------------------+
制作数字信封
 1. 随机生成报文密钥 mk；
 2. 用接收方公钥对 mk 加密(按 PKCS#1 标准)；
 3. 使用 mk 对发送内容加密；
 4. 如果需要签名，则执行如下步骤:
    a. 对发送内容作数字签名(但不作编码)；
    b. 使用 mk 为密钥对签名进行加密；
    c. 按格式编码构成数字信封；
解数字信封
 1. 使用接收者自已的私钥解出 mk;
 2. 使用 mk 为密钥解密传送的内容;
 3. 如果存在签名，则执行:
    a. 使用 mk 为密钥解出签名值
    b. 验证签名
	
疑问:
p1 签名只能用 sha1 作摘要，用 rsa 签名吗?
p1 签名的长度取决于什么?

p7 签名只能用 sha1 和 sm3 作哈希，用 rsa 签名吗?