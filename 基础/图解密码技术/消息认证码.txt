定义
	消息认证码（MAC）是一种与密钥相关联的单向散列函数，是一种确认消息完整性并进行认证的技术。
	将消息认证码附加在通信报文后面，就可以识别通信内容是否被篡改或伪装。
认证与完整性检查
	消息认证码的输入包括任意长度的消息和一个发送者与接收者之间的共享的密钥，它可以输出固定长度
	的数据，这个数据称为MAC值。
	认证：没有共享密钥的人无法计算出MAC值，以此完成认证。
	完整性：消息的细小变化也会带来MAC值的变化，以此完成完整性检查。
消息认证码的密钥配送问题
	公钥密码
	Diffie-Hellman密钥交换
	密钥分配中心
应用
	SWIFT
	IPsec
	SSL/TLS
实现
	使用SHA-1、MD5之类的单向散列函数实现，其中一种实现方法称为HMAC。
	使用DES、AES之类的分组密码实现。
		将分组密码的密钥作为消息认证码的共享密钥来使用，并使用CBC模式将消息全部加密。由于消息认
		证码不需要解密，因此将除最后一个分组以外的密文部分全部丢弃，而将最后一个分组用作MAC值。
		由于CBC模式最后一个分组会受到整个消息以及密钥的双重影响，因此可以将它用作消息认证码。
	使用流密码和公钥密码也可以实现消息认证码。
HMAC
	HMAC是一种使用单向散列函数来构造消息认证码的方法。
	具体可以参考流程图[HMAC实现步骤]
对消息认证码的攻击
	消息重放：将发送方MAC值保存下来重复利用而并不破解消息认证码。
	密钥推测攻击：根据MAC值对通信双方所使用的密钥进行暴力破解或生日攻击。

对消息重放攻击的解决办法及缺点
	序号：约定每次都对发送的消息赋予一个递增的编号（序号），并且在计算MAC值时将序号也包含在消息中
	。这样一来，由于第三者无法计算序号递增之后的MAC值，因此就可以防御重放攻击。
		缺点：每个通信对象都需要记录最后一个消息的序列号。
	时间戳：约定在发送消息进包含当前时间，若收到以前的消息，即便MAC值正确也将其当做错误的消息来处
	理。
		缺点：发送者和接收者的时钟必须一致，而且考虑到通信延迟，必须保有时间判断缓冲，多少会存在进行
		重放攻击的空间。
	nonce：通信之前，接收者先向发送者发送一个一次性随机数，称为nonce。发送者在消息中包含这个nonce
	并计算MAC值。由于每次通信时nonce的值都会发生变化，因此无法进行重放攻击。
		缺点：通信数据量增加。
		
对密钥推测攻击的解决办法
	在生成消息认证码所使用的密钥时，必须使用密码学安全的、高强度的伪随机数生成器。
	
消息认证码无法解决的问题
	对第三方证明：第三认证方虽获取密钥且计算出MAC值并比对正确，但无法确认是通信双方的哪一方发送的MAC值。
	防止否认：通信双方的一方否认发送消息的人是自己。
	而这需要使用数字签名来对第三方证明和防止否认。	