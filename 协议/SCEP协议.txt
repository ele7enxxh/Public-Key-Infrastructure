SCEP

out-of-band				带外
distinguished name		专有名称

Open reference implementation of a SCEP v2 client
【简介】
公钥加密是用于潜在大规模用户通讯安全的最适当的加密机制。公钥加密的主要优势是其不需要两个要求安全通信的实体之间进行任何预先的带外（out-of-band）通信。
如果Bob想要发送给Alice一个安全消息，他只需要持有Alice的公钥并使用此公钥加密消息即可。这里的问题不是加密算法而是公钥，也即Bob必须确定用于加密的公钥确
实属于Alice。证书和公钥基础设施为此而引入。

证书是拥有一个专有名称（distinguished name）、一个公钥和一个签名的容器。专有名称标识了终端实体，如'Alice'。
证书的签名是关键因子，通过它使用此公钥的用户可以验证该公钥确属于一个特定的专有名称。证书的签名由受通信双方共同信任的第三方（也叫ca）产生，ca给此证书签名，
从而证实了此公钥确实属于一个特定的专有名称。之后，任何想要证实此证书是否有效的用户可以通过比对证书上的数字签名与其本人计算的结果是否一致确定。

通常以手动形式为新创建的公私钥对获取一张证书，获取签名证书的过程叫做证书注册（certificate enrollment）。
一个实体想要获得一张由ca为新创建的公私钥对签名的证书，需要执行如下步骤：
	1.生成公私钥对
	2.为此公私钥对生成证书请求
	3.发送证书请求给第三方（ca）
	4.获得可靠性的证明
	5.获得签名证书

手动证书注册适合于个人获取证书，但不是大规模公钥认证部署的选择。因此必须要有一种不通过手动注册而获取证书的方式，简单证书注册协议（SCEP）因为它的自动化而被
推荐。SCEP提供了一个用于同ca通信的标准接口，它的一些特性使其可以进行自动证书的注册而完全不需要做任何手动处理。SCEP所有可用的实施方式均基于SCEP提议的草案版
本5，此草案已作为官方互联网草案出版。SCEP的典型使用场景是大网络环境下众多网络设备需要证书以标识身份。思科使用SCEP作为协议来自动为路由器和其他网络设备获取证书。
		
【动机】
对于基于vpn的ipsec网络，scep已经被证实是一个自动注册证书的很好的解决方案。
2.1适用需求
	1.公私钥生成及客户端证书自动注册
	2.自动导入Netscape和IE的证书数据库
	3.对Windows、MacOS、Linux、Sun OS等系统可以轻便使用
	4.可用于嵌入式系统
	5.自动注册-不用或减少人工操作

【证书存储】
3.1证书存储
	证书获取之后须存放到磁盘上以便浏览器访问。一些常见的浏览器（如Netscape和IE）都有自己用于存放客户端或服务器的证书库。用于网页浏览的证书及通信的邮件都存放在证书库里。
	如何将证书安装到证书库是一个难题，因为这也关系到私钥如何安装到证书库中去。
3.1.1浏览器支持证书安装
	Netscape和IE浏览器都有生成客户端证书请求的机制。它们将请求放在html表单中通过http协议发送给web服务器，服务器收到请求后签发证书并发给请求的客户端浏览器。之后签发的证
	书通过http响应进行安装。
	这种安装方法方便用户，但当远程服务器使用scep代理时，便不再安全。
	
	Netscape客户端的证书管理
	Netscape3.0浏览器引入了一个专有html标签，称为keygen。keygen标签让浏览器生成一个密钥对，将公钥以表单值形式返回给浏览器。keygen标签让浏览器显示一个用于进行安全等级选
	择的下拉框。能够选择的项取决于浏览器版本和导出类型。Opera和KDE也支持keygen标签功能。
	当使用keygen标签功能时，浏览器会发送的一个SPKAC格式的证书请求。不同于在scep上使用的PKCS#10，SPKAC没有专有主题项（distinguished subject name），也没有可选属性集合。
	服务器生成证书后，会以application/x（MIME-Type）格式发给浏览器，浏览器确认mime类型后安装。
	
	IE客户端证书管理
	微软使用一套自定义的CryptoAPI进行证书的安装，这可以让其他的应用也可以访问证书。CryptoAPI是系统级API，不能与html语言直接交互，只能通过JavaScript或VBScript&ActiveX控件
	从web页面内容对其访问。

【架构】
4.1通常架构
	SCEP客户端的核心是scep客户端库。该库提供了一个典型scep客户端所需要的全部函数，包括了证书注册的整个过程（如发送证书请求，轮询结果等）和对证书吊销列表crl的管理。scep客
	户端库基于crypto库，后者提供了基本的加密和证书管理函数，如X509,PKCS,ASN.1（DER和BER编码）和S/MINE。
4.2scep客户端类型
	这里只考虑两种类型，基于浏览器的和嵌入式系统的客户端。两种客户端使用相同的scep客户端库，但执行时所处运行时环境不同。
	4.2.1基于浏览器的客户端
		除了标准scep客户端之外，一台独立的http服务器也可以作为scep客户端，此时称为scep代理。用户可以在浏览器上通过指定url来访问这个代理。
		scep代理处理来自浏览器上的证书请求，scep代理基本提供三种功能：获取新证书（请求），证书轮询（检测请求的证书是否可用），获取ca证书。
		scep客户端库和scep代理应该作为一个应用部署在一起。用户只需将证书请求通过浏览器发送给scep代理即可。ca的根证书也部署在了scep代理上。
	4.2.2基于浏览器客户端的应用场景
		1.浏览器获取ca的根证书。
		2.浏览器在本地生成私钥（通常有keygen标签和客户端脚本两种方式），之后生成证书请求。将证书请求通过http协议发送给scep代理，代理简单地处理证书请求后再发送给scep服务器。
		3.浏览器不运行证书吊销请求，需要人工操作。
	4.2.3嵌入式客户端
		对嵌入式应用环境的要求
		对于嵌入式系统上的应用，其运行时环境不同于标准桌面或服务器应用。有些方面如有限的系统资源、有限的可读/写存储、不同的部署方式需要着重强调：
			1.有限的系统资源，如cpu架构、cpu性能、内存大小
			2.有限的可读/写存储
			3.操作系统支持，如一些操作系统不支持所有的操作
			4.对于java应用，不支持所有的java标准库
			5.对于只读内存的操作
		在嵌入式系统环境上的scep
			scep客户端库可以运行在J2ME环境上，这为嵌入式系统开发者对证书进行管理提供了可能。开发者可以利用命令行借助scep客户端库与scep服务器进行对话。
4.3第三方产品
	4.3.1 BouncyCastle Crypto API
	此开源crypto API发展比较成熟，包含了轻量级的加密API，JCE密码扩展及用于处理ANS.1、X509证书和部分PKCS类型文件的库。
	由于scep客户端的部署不需要任何来自jce的支持，所以它可以运行在J2ME环境上。
	4.3.2 ACME Serve
	一个小型的http服务器，可以很容易嵌入到其他应用上。纯Java写成，与Java servlet API良好兼容。
	4.3.3 JDK1.3 / J2ME
	需要运行在支持标准JDK1.3的环境上。
	4.3.4 OpenSCEP 0.4.2
	开源版本的scep应用。0.4.2版本实现了本文档提及的全部组件扩展功能。
	
chapter 5 设计与实现
5.1概览
	需要实现的内容如下：
		1.核心（协议栈）
		2.http代理（网关http-scep）
		3.命令行客户端
5.2核心
	scep实现的核心是scep协议的实现，这包括负责加解密不同scep消息的所有类。
	5.2.1 综合设计
	
对于scep协议扩展项的建议
A.1动机
	通过scep协议，网络设备可以与ca进行通信。此协议只针对网络客户端进行限制，要求其必须遵守。scep服务器作为幕后ca的一个前台行使功能，如此一来ca本身就不用履行scep协议。
	，这在客户端一侧却行不通。客户端请求证书必须符合两个条件：一是完全履行scep协议，二是使用pkcs#10证书请求格式。这两个前提条件严重限制了scep协议的适用范围。
	场景：
	html